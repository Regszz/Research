import random
import string

class SupportTicket:
    # Class variables to track ticket counts
    ticketCounter = 2000
    activeTickets = 0
    closedTickets = 0

    def __init__(self, staffID, requesterName, emailAddress, issueDesc):
        # Initialize a new ticket with provided details
        self.ticketID = SupportTicket.ticketCounter
        SupportTicket.ticketCounter += 1  # Increment the ticket counter for the next ticket
        self.staffID = staffID
        self.requesterName = requesterName
        self.emailAddress = emailAddress
        self.issueDesc = issueDesc
        self.responseMessage = "Pending"
        self.status = "Active"
        SupportTicket.activeTickets += 1  # Increase the count of active tickets
        self.generatedPassword = None

    def showTicket(self):
        # Print details of the ticket
        print(f"Ticket ID: {self.ticketID}")
        print(f"Requester: {self.requesterName}")
        print(f"Staff ID: {self.staffID}")
        print(f"Email: {self.emailAddress}")
        print(f"Issue Description: {self.issueDesc}")
        print(f"Response: {self.responseMessage}")
        if self.generatedPassword:
            print(f"Password: {self.generatedPassword}")
        print(f"Status: {self.status}\n")

    def addResponse(self, response):
        # Add a response to the ticket and mark it as closed
        self.responseMessage = response
        self.status = "Closed"
        SupportTicket.activeTickets -= 1  # Decrease the count of active tickets
        SupportTicket.closedTickets += 1  # Increase the count of closed tickets

    def processPasswordChange(self):
        # Process a password change request if the issue description indicates it
        if "password change" in self.issueDesc.lower():
            newPassword = self.createPassword()
            self.responseMessage = f"Password has been changed to: {newPassword}"
            self.status = "Closed"
            SupportTicket.activeTickets -= 1  # Decrease the count of active tickets
            SupportTicket.closedTickets += 1  # Increase the count of closed tickets
            self.generatedPassword = newPassword

    def createPassword(self):
        # Generate a new password based on staff ID and requester name
        staffID_chars = self.staffID[:2]
        requesterName_chars = self.requesterName[3:]
        random_chars = ''.join(random.choices(string.ascii_letters, k=3))  # Generate random characters
        newPassword = staffID_chars + requesterName_chars + random_chars
        return newPassword

    def reopen(self):
        # Reopen a closed ticket
        self.status = "Reopened"
        SupportTicket.activeTickets += 1  # Increase the count of active tickets
        SupportTicket.closedTickets -= 1  # Decrease the count of closed tickets

    @classmethod
    def getTicketStats(cls):
        # Return a summary of ticket statistics
        return (f"Tickets Created: {cls.ticketCounter - 2000}\n"
                f"Tickets Resolved: {cls.closedTickets}\n"
                f"Tickets To Resolve: {cls.activeTickets}")

def main():
    ticket_list = []

    while True:
        print("\nMenu:")
        print("1. Create New Ticket")
        print("2. Close a Ticket")
        print("3. Process Password Change Request")
        print("4. View All Tickets")
        print("5. View Active Tickets")
        print("6. View Closed Tickets")
        print("0. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            # Create a new ticket
            requesterName = input("Enter Requester Name: ")
            staffID = input("Enter Staff ID: ")
            emailAddress = input("Enter Email Address: ")
            issueDesc = input("Enter Issue Description: ")
            ticket_list.append(SupportTicket(staffID, requesterName, emailAddress, issueDesc))
            print("Ticket created successfully.")
        elif choice == "2":
            # Close a ticket
            for i, ticket in enumerate(ticket_list, start=1):
                print(f"{i}. Ticket ID: {ticket.ticketID} (Status: {ticket.status})")
            ticket_index = int(input("Enter the index of the ticket to close: ")) - 1
            if 0 <= ticket_index < len(ticket_list):
                response = input("Enter response for the selected ticket: ")
                ticket_list[ticket_index].addResponse(response)
                print("Ticket closed successfully.")
            else:
                print("Invalid ticket index.")
        elif choice == "3":
            # Process password change request
            print("Active Tickets:\n")
            for i, ticket in enumerate(ticket_list, start=1):
                if ticket.status == "Active":
                    print(f"{i}. Ticket ID: {ticket.ticketID} (Status: {ticket.status})")
            ticket_index = int(input("Enter the index of the password change request: ")) - 1
            if 0 <= ticket_index < len(ticket_list):
                ticket_list[ticket_index].processPasswordChange()
                print("Password changed successfully.")
            else:
                print("Invalid ticket index.")
        elif choice == "4":
            # View all tickets
            print("\nAll Tickets:")
            for ticket in ticket_list:
                ticket.showTicket()
            print("\nTicket Statistics:")
            print(SupportTicket.getTicketStats())
        elif choice == "5":
            # View active tickets
            print("\nActive Tickets:\n")
            for ticket in ticket_list:
                if ticket.status == "Active":
                    ticket.showTicket()
            print("\nTicket Statistics:\n")
        elif choice == "6":
            # View closed tickets
            print("\nClosed Tickets:\n")
            for ticket in ticket_list:
                if ticket.status == "Closed":
                    ticket.showTicket()
            print("\nTicket Statistics:\n")
            print(SupportTicket.getTicketStats())
        elif choice == "0":
            # Exit the program
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please enter a valid option.")

if __name__ == "__main__":
    main()
